from RPLCD.i2c import CharLCD
import RPi.GPIO as GPIO
import serial
import time
import cv2
import imutils
import numpy as np
import dlib
from imutils import face_utils
from scipy.spatial import distance as dist
from threading import Timer

# Function to calculate the Eye Aspect Ratio (EAR)
def eye_aspect_ratio(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

# Function to turn off the light
def turn_off_light():
    GPIO.output(LIGHT_PIN, GPIO.LOW)
    print("LIGHT OFF!")

# Function to send an SMS
def send_sms(phone_number, text_message):
    ser.write(("AT+CMGF=1\r\n").encode())
    time.sleep(1)
    ser.write(("AT+CMGS=\"" + phone_number + "\"\r\n").encode())
    time.sleep(1)
    ser.write((text_message + "\x1A").encode())
    time.sleep(3)
    print("SMS sent!")

# Function to clear the LCD after a delay
def clear_lcd():
    lcd.clear()

# Constants
EYE_AR_THRESH = 0.25
EYE_AR_CONSEC_FRAMES = 20
BUZZER_PIN = 17
LIGHT_PIN = 27
SMS_ALERT_THRESHOLD = 4

# SMS configuration
PHONE_NUMBER = '1234569873'
TEXT_MESSAGE = 'Drowsiness detected'
SERIAL_PORT = "/dev/ttyS0"
BAUD_RATE = 115200

# Initialize counters
COUNTER = 0
ALARM_ON = False
ALERT_COUNT = 0
LIGHT_TIMER = None
LCD_TIMER = None  # Timer for clearing the LCD

# Set up GPIO
GPIO.setwarnings(False)  # Disable GPIO warnings
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(LIGHT_PIN, GPIO.OUT)
GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(LIGHT_PIN, GPIO.LOW)

# Set up serial communication for SMS
ser = serial.Serial(SERIAL_PORT, BAUD_RATE)
ser.flushInput()

# Initialize the LCD
lcd = CharLCD(i2c_expander='PCF8574', address=0x27, port=1)  # Adjust address and port as needed
lcd.clear()

# Load face detector and predictor
print("[INFO] loading facial landmark predictor...")
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("/home/rpi/Downloads/shape_predictor_68_face_landmarks.dat")

(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

print("[INFO] starting video stream...")
vs = cv2.VideoCapture(0)
time.sleep(1.0)

while True:
    ret, frame = vs.read()
    frame = imutils.resize(frame, width=450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    rects = detector(gray, 0)

    for rect in rects:
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)

        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)

        ear = (leftEAR + rightEAR) / 2.0

        leftEyeHull = cv2.convexHull(leftEye)
        rightEyeHull = cv2.convexHull(rightEye)
        cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)

        if ear < EYE_AR_THRESH:
            COUNTER += 1
            if COUNTER >= EYE_AR_CONSEC_FRAMES:
                if not ALARM_ON:
                    ALARM_ON = True
                    GPIO.output(BUZZER_PIN, GPIO.HIGH)
                    ALERT_COUNT += 1
                    print("DROWSINESS ALERT!")
               
                    if ALERT_COUNT == 2:
                        GPIO.output(LIGHT_PIN, GPIO.HIGH)
                        print("LIGHT ON!")
               
                        if LIGHT_TIMER is not None:
                            LIGHT_TIMER.cancel()
                        LIGHT_TIMER = Timer(15.0, turn_off_light)
                        LIGHT_TIMER.start()
               
                    if ALERT_COUNT == SMS_ALERT_THRESHOLD:
                        send_sms(PHONE_NUMBER, TEXT_MESSAGE)
                        lcd.clear()
                        lcd.write_string("Drowsiness Alert!")
                       
                        # Start a timer to clear the LCD after 20 seconds
                        if LCD_TIMER is not None:
                            LCD_TIMER.cancel()
                        LCD_TIMER = Timer(20.0, clear_lcd)
                        LCD_TIMER.start()
           
            cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        else:
            COUNTER = 0
            if ALARM_ON:
                ALARM_ON = False
                GPIO.output(BUZZER_PIN, GPIO.LOW)

        cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

cv2.destroyAllWindows()
vs.release()

if LIGHT_TIMER is not None:
    LIGHT_TIMER.cancel()
if LCD_TIMER is not None:
    LCD_TIMER.cancel()

GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(LIGHT_PIN, GPIO.LOW)

GPIO.cleanup()
ser.close()
lcd.clear()
